esphome:
  name: remotetemperature1
  friendly_name: RemoteTemperature1

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "FVr0vsDAu7t6LAuXhOuGDjqqZYo/fwrdx/+rBXAXm9w="

ota:
  password: "8c04907d3ac188804d04ff11999fe250"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Remotetemperature1"
    password: "OModHNJpNjmQ"

captive_portal:
    

dallas:
  pin: 
    number: GPIO2
    mode: INPUT_PULLUP
  update_interval: 10s
  
sensor:
  - platform: dallas
    address: 0x863ce1d443131628
    name: "Temperature 1"
    id: temperature_1
  - platform: homeassistant
    id: outside_temp
    entity_id: sensor.openweathermap_temperature
    internal: true
  - platform: homeassistant
    name: "isNightTime"
    id: isnighttime
    entity_id: binary_sensor.oledscreens

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 55

  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: font2
    size: 16




i2c:
#  sda: D1
#  scl: D2
  sda: 4
  scl: 5
  frequency: 800kHz

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3D
    id: display1
    pages:
          - id: page1
            lambda: |-
              if(id(isnighttime).state) { 
                it.printf(0, 0, id(roboto), "%.1f°", id(temperature_1).state * (9.0/5.0) + 32.0 );
              } else {it.print(0, 0, id(roboto), "");}
          - id: page2
            lambda: |-
              if(id(isnighttime).state) {
                it.printf(0, 0, id(roboto), "%.1f°", id(outside_temp).state );
              } else {it.print(0, 0, id(roboto), "");}

# For example cycle through pages on a timer
interval:
  - interval: 5s
    then:
      - display.page.show_next: display1
      - component.update: display1

# it.print(0, 0, id(font2), "Hello World!");