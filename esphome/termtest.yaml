esphome:
  name: termtest
  friendly_name: termTest

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "+LmcKaAeTjf59M//Ubc4jq/gcpnKGWvb+J1d6fCN07Q="

ota:
  password: "fed2414d224d0f88be3ccc5d2be7e8b2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Termtest Fallback Hotspot"
    password: "zzHBHlHFInbC"

captive_portal:

sensor:
  - platform: rotary_encoder
    name: "dial1"
    id: "dial1"
    pin_a: 14
    pin_b: 12
    min_value: 0
    max_value: 100
    on_clockwise:
      then:
        lambda: !lambda |-
          id(campertherm).target_temperature = id(campertherm).target_temperature + 0.5;
          ESP_LOGD("THERM","UP");
    on_anticlockwise:
      then:
        lambda: !lambda |- 
              id(campertherm).target_temperature = id(campertherm).target_temperature - 0.5;
              ESP_LOGD("THERM","DOWN");


  - platform: sht3xd
    temperature:
      name: "Therm Temperature"
      id: thermtemp
    humidity:
      name: "Therm Humidity"
      id: thermhumidity
    address: 0x45
    update_interval: 10s


binary_sensor:
  - platform: gpio
    pin:
      number: 13
      mode: INPUT_PULLUP
      inverted: true
    name: "switch1"
    id: switch1
    on_press:
      then:
        lambda: !lambda |-
          if (id(campertherm).mode == CLIMATE_MODE_HEAT ){
            id(campertherm).mode = CLIMATE_MODE_OFF;
          } else {id(campertherm).mode = CLIMATE_MODE_HEAT;}


# ESP_LOGD("swicth",printf('%s',id(campertherm).action));


# ESP_LOGD("swicth1","Press");
# id(campertherm).heat_mode 

switch:  
  - platform: gpio
    pin:
      number: 15
    name: "heater"
    id: heater

climate:
  - platform: thermostat
    name: "Camper Thermostat"
    id: campertherm
    sensor: thermtemp
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    min_idle_time: 1s
    heat_action:
      - switch.turn_on: heater
    idle_action:
      - switch.turn_off: heater
    default_preset: Def
    preset:
      - name: Def
        default_target_temperature_low: 10 °C

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 55

  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: font2
    size: 30




i2c:
  sda: 4
  scl: 5
  frequency: 800kHz

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3D
    id: display1
    pages:
          - id: page1
            lambda: |-
              it.printf(0, 0, id(roboto), "%.1f°", id(thermtemp).state * (9.0/5.0) + 32.0  );
          - id: page2
            lambda: |-
              it.printf(0, 0, id(roboto), "%.0f%%", id(thermhumidity).state );
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: display2
    flip_y: False
    flip_x: False
    pages:
          - id: page21
            lambda: |-
              it.printf(0, 0, id(roboto), "%.1f°", id(campertherm).target_temperature * (9.0/5.0) + 32.0 );
          - id: page22
            lambda: |-
              if (id(campertherm).mode == CLIMATE_MODE_HEAT) {
                it.print(0, 0, id(font2), "Heat On");
                it.printf(0, 35, id(font2), "%.1f°", id(campertherm).target_temperature * (9.0/5.0) + 32.0 );
              } else {
                it.print(0, 0, id(font2), "Heat Off");
                it.printf(0, 35, id(font2), "%.1f°", id(campertherm).target_temperature * (9.0/5.0) + 32.0 );
              }

# For example cycle through pages on a timer
interval:
  - interval: 5s
    then:
      - display.page.show_next: display1
      - component.update: display1
  - interval: 5s
    then:
      - display.page.show_next: display2
      - component.update: display2
# it.print(0, 0, id(font2), "Hello World!");